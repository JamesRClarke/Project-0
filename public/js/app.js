"use strict";function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError("Cannot call a class as a function")}console.log("JS Loaded"),$(function(){var a=$("#play"),n=($("#answer"),$("#anagram1")),e=($("#anagram2"),$("#anagram3"),$("#anagram4"),$("#anagram5"),$("#anagram6"),$("#anagram7"),$("#anagram8"),$("#anagram9"),$("#anagram10"),$("#BBT").val()),o=$("#LOTR").val(),s=$("#EPL").val(),l=$("#ASIA").val(),c=$("#WDI").val(),t=$("#easy").val(),r=$("#medium").val(),i=$("#hard").val(),d=$("#insane").val();e=["sheldon","leanord","spock","cheescakefactory","howard","startrek","penny","koothrapoli","bernadette","physics","laundry","halonight","dumplings","brisket","nasa","stringtheory","darkmatter","comiccon","comicbook"],o=["arragon","gimli"];var u=null,h=null;$("#subject-options").on("change",function(){switch(h=$("#subject-options option:checked").val()){case"$BBT":h=e;break;case"$LOTR":h=o;break;case"$EPL":h=s;break;case"$WDI":h=c;break;case"$ASIA":h=l;break;default:alert("AAAAAAAAAHHHHHHH!!!!!!")}}),$("#difficulty-options").on("change",function(){switch(u=$("#difficulty-options option:checked").val()){case"easy":u=t;break;case"medium":u=r;break;case"hard":u=i;break;case"insane":u=d;break;default:alert("AAAAAAAAHHHHH!!!!!")}}),a.on("click",function(){console.log("heyo!"),h=h[Math.floor(Math.random()*h.length)];var a=0;$("#submit").on("click",function(){$("#answer").val()===h?(n.text(h).css("display","hidden"),a=+h.length,n.addClass("animated fadeOutLeft").css("color","green"),console.log(a),console.log("working")):n.addClass("animated wobble").css("color","red")});var e=null;e=h.split("").sort(function(){return.5-Math.random()}).join(""),function(){var a=setInterval(function(){n.text(e).css("top","+=10px"),console.log("heyyoo!"),$("#answer").val()===h&&(clearInterval(a),console.log("yeas James!"))},2e3)}()})});var Subject=function a(){_classCallCheck(this,a)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
